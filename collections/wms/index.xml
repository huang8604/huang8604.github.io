<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WMS - 合集 - 文韬的文档</title><link>https://huang8604.github.io/collections/wms/</link><description>简单记录工作总结💼，学习整理。💰🍺</description><generator>Hugo 0.152.2 &amp; FixIt v0.3.20</generator><language>zh-CN</language><managingEditor>huang8604@163.com (wentao)</managingEditor><webMaster>huang8604@163.com (wentao)</webMaster><lastBuildDate>Fri, 06 Dec 2024 06:53:44 +0000</lastBuildDate><atom:link href="https://huang8604.github.io/collections/wms/index.xml" rel="self" type="application/rss+xml"/><item><title>双屏动画</title><link>https://huang8604.github.io/posts/%E5%8F%8C%E5%B1%8F%E5%8A%A8%E7%94%BB/</link><pubDate>Wed, 06 Nov 2024 06:57:58 +0000</pubDate><author>huang8604@163.com (wentao)</author><guid>https://huang8604.github.io/posts/%E5%8F%8C%E5%B1%8F%E5%8A%A8%E7%94%BB/</guid><description>&lt;h2 class="heading-element" id="目标"&gt;&lt;span&gt;目标：&lt;/span&gt;
 &lt;a href="#%e7%9b%ae%e6%a0%87" class="heading-mark"&gt;
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"&gt;&lt;/path&gt;&lt;/svg&gt;
 &lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;&lt;a class="lightgallery" href="https://picgo.myjojo.fun:666/i/2024/10/17/6710e06e654de.gif" title="45d40ecaa001304584a749db64e73c80\_MD5" data-thumbnail="https://picgo.myjojo.fun:666/i/2024/10/17/6710e06e654de.gif" data-sub-html="&lt;h2&gt;45d40ecaa001304584a749db64e73c80\_MD5&lt;/h2&gt;"&gt;&lt;img loading="lazy" src='https://picgo.myjojo.fun:666/i/2024/10/17/6710e06e654de.gif' alt="45d40ecaa001304584a749db64e73c80\_MD5"&gt;&lt;/a&gt;&lt;/p&gt;</description></item><item><title>adsp wristdown 流程与实现</title><link>https://huang8604.github.io/posts/adsp-wristdown-%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link><pubDate>Wed, 06 Nov 2024 06:57:56 +0000</pubDate><author>huang8604@163.com (wentao)</author><guid>https://huang8604.github.io/posts/adsp-wristdown-%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid><category domain="https://huang8604.github.io/categories/android/">Android</category><description>&lt;p&gt;#Peppermill #算法研究&lt;/p&gt;
&lt;p&gt;目前 落腕灭屏算法大致在 framework 层实现。&lt;br&gt;
目前算法的思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#%E8%BF%90%E5%8A%A8%E6%A3%80%E6%B5%8B"&gt;#运动检测&lt;/a&gt;，通过一些特征值，来判断是否是一个运动段落。&lt;/li&gt;
&lt;li&gt;符合的运动检测后，我们来判断是否是落腕的动作。&lt;/li&gt;
&lt;li&gt;符合的落腕的动作后，sensor 上报 event。 framework 监听获取后进行灭屏的判断动作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 class="heading-element" id="背景介绍"&gt;&lt;span&gt;背景介绍&lt;/span&gt;
 &lt;a href="#%e8%83%8c%e6%99%af%e4%bb%8b%e7%bb%8d" class="heading-mark"&gt;
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"&gt;&lt;/path&gt;&lt;/svg&gt;
 &lt;/a&gt;
&lt;/h4&gt;&lt;p&gt;早起的 Android 平台，Sensor 是放在 AP 侧实现的，Sensor 生成设备节点供上层使用，Sensor 的工作 CPU 就不能完好的休眠。&lt;br&gt;
后续的高版本 android 各个平台厂商都有了不同的方案，SensorHub，ADSP&lt;/p&gt;</description></item><item><title>Android 记录系统空间的高通答疑</title><link>https://huang8604.github.io/posts/android-%E8%AE%B0%E5%BD%95%E7%B3%BB%E7%BB%9F%E7%A9%BA%E9%97%B4%E7%9A%84%E9%AB%98%E9%80%9A%E7%AD%94%E7%96%91/</link><pubDate>Wed, 06 Nov 2024 06:57:56 +0000</pubDate><author>huang8604@163.com (wentao)</author><guid>https://huang8604.github.io/posts/android-%E8%AE%B0%E5%BD%95%E7%B3%BB%E7%BB%9F%E7%A9%BA%E9%97%B4%E7%9A%84%E9%AB%98%E9%80%9A%E7%AD%94%E7%96%91/</guid><category domain="https://huang8604.github.io/categories/android/">Android</category><description>&lt;p&gt;&lt;a class="lightgallery" href="https://huang8604.github.io/obsidion/Media/Case_%2005784001%20~%20Customer%20Engineering%20Community.pdf" title="Case\_ 05784001 ~ Customer Engineering Community.pdf" data-thumbnail="/obsidion/Media/Case_%2005784001%20~%20Customer%20Engineering%20Community.pdf" data-sub-html="&lt;h2&gt;Case\_ 05784001 ~ Customer Engineering Community.pdf&lt;/h2&gt;"&gt;&lt;img loading="lazy" src='https://huang8604.github.io/obsidion/Media/Case_%2005784001%20~%20Customer%20Engineering%20Community.pdf' alt="Case\_ 05784001 ~ Customer Engineering Community.pdf"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="lightgallery" href="https://picgo.myjojo.fun:666/i/2024/05/23/664f083143580.png" title="image.png" data-thumbnail="https://picgo.myjojo.fun:666/i/2024/05/23/664f083143580.png" data-sub-html="&lt;h2&gt;image.png&lt;/h2&gt;"&gt;&lt;img loading="lazy" src='https://picgo.myjojo.fun:666/i/2024/05/23/664f083143580.png' alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="details admonition note open disabled"&gt;
 &lt;div class="details-summary admonition-title"&gt;&lt;i class="icon fa-fw fa-solid fa-pencil-alt" aria-hidden="true"&gt;&lt;/i&gt;高通回复容量疑问&lt;/div&gt;
 &lt;div class="details-content"&gt;
 &lt;div class="admonition-content"&gt;&lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;&lt;p&gt;case中提到的resize/recovery，就是我们之前提到的恢复出厂设置后userdata拓展到剩余空间，16G变32G的动作。&lt;br&gt;
按高通的回复截图，resize/recovery之前 ui上面显示的总空间/已用空间大小没有任何参考意义（参考截图第四段落最后一行。这里提到的不可信大小就是之前你们看到的下载软件后开机，系统占用16G，总容量32G）&lt;br&gt;
高通认为resize之后，此时UI上显示的存储空间数据是可信的（参考截图倒数第三行，这里提到的可信大小就是你们了解的恢复出厂设置后系统占用32G，总容量64G。我们和高通在case上沟通时提供的机器数据是基于128G的，所以高通在引用数据时写的是128G）&lt;br&gt;
另外，目前PNC560我们已修改为下载软件后开机时自动拓展，无需再次恢复出厂设置了，所以用户是看不到16G系统占用这个resize之前的数据的。&lt;/p&gt;</description></item><item><title>android 原生安全音量逻辑设计</title><link>https://huang8604.github.io/posts/android-%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8%E9%9F%B3%E9%87%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/</link><pubDate>Wed, 06 Nov 2024 06:57:56 +0000</pubDate><author>huang8604@163.com (wentao)</author><guid>https://huang8604.github.io/posts/android-%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8%E9%9F%B3%E9%87%8F%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/</guid><description>&lt;p&gt;****## 前言&lt;/p&gt;
&lt;p&gt;接到一个开发需求，需要定制化开发一个安全音量功能；此前有了解过为了符合欧盟等有关国家和地区的规定，原生Android是有自带一个安全音量功能的，想要定制则先要了解这个功能原先长什么样子，下面我们就从一个系统工程师的角度出发去探寻一下，原生Android的安全音量功能是如何实现的。&lt;/p&gt;</description></item><item><title>【Android 12】认识窗口_android 窗口模式 窗口层级-CSDN博客</title><link>https://huang8604.github.io/posts/%E8%AE%A4%E8%AF%86%E7%AA%97%E5%8F%A3-%E7%AA%97%E5%8F%A3%E6%A8%A1%E5%BC%8F-%E7%AA%97%E5%8F%A3%E5%B1%82%E7%BA%A7android-12-csdn%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 06 Nov 2024 06:57:54 +0000</pubDate><author>huang8604@163.com (wentao)</author><guid>https://huang8604.github.io/posts/%E8%AE%A4%E8%AF%86%E7%AA%97%E5%8F%A3-%E7%AA%97%E5%8F%A3%E6%A8%A1%E5%BC%8F-%E7%AA%97%E5%8F%A3%E5%B1%82%E7%BA%A7android-12-csdn%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p&gt;该文章为窗口层级结构系列文章的总结，重新回看这方面内容的时候我自己也有了一些新的感悟，希望通过本次总结能让大家再次对窗口有一个全面的认识。&lt;/p&gt;
&lt;p&gt;一般来说，屏幕上最起码包含三个窗口，StatusBar窗口、Activity窗口以及NavigationBar窗口：&lt;/p&gt;</description></item><item><title>Vsync之app层面深入分析 vsynceventdata-CSDN博客</title><link>https://huang8604.github.io/posts/vsync%E4%B9%8Bapp%E5%B1%82%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90-vsynceventdata-csdn%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 06 Nov 2024 06:57:53 +0000</pubDate><author>huang8604@163.com (wentao)</author><guid>https://huang8604.github.io/posts/vsync%E4%B9%8Bapp%E5%B1%82%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90-vsynceventdata-csdn%E5%8D%9A%E5%AE%A2/</guid><description>&lt;h3 class="heading-element" id="背景"&gt;&lt;span&gt;背景&lt;/span&gt;
 &lt;a href="#%e8%83%8c%e6%99%af" class="heading-mark"&gt;
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"&gt;&lt;/path&gt;&lt;/svg&gt;
 &lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;前面文章和视频课程都是直接从SurfaceFlinger层面开始讲解Vsync部分的，当然vsync的主要核心逻辑也确实在SurfaceFlinger，但是一般vsync都是由app层面发起请求的，这一部分也还是有必要带大家了解清楚&lt;/p&gt;</description></item><item><title>Android14 - WindowManagerService之客户端Activity布局-CSDN博客</title><link>https://huang8604.github.io/posts/android14-windowmanagerservice%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AFactivity%E5%B8%83%E5%B1%80-csdn%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 06 Nov 2024 06:57:52 +0000</pubDate><author>huang8604@163.com (wentao)</author><guid>https://huang8604.github.io/posts/android14-windowmanagerservice%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AFactivity%E5%B8%83%E5%B1%80-csdn%E5%8D%9A%E5%AE%A2/</guid><description>&lt;h2 class="heading-element" id="a---windowmanagerservice"&gt;&lt;span&gt;&lt;strong&gt;A&lt;strong&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/strong&gt;d&lt;strong&gt;&lt;strong&gt;r&lt;/strong&gt;&lt;/strong&gt;oi&lt;strong&gt;&lt;strong&gt;d&lt;/strong&gt;&lt;/strong&gt;1****4&lt;/strong&gt; &lt;strong&gt;-&lt;/strong&gt; &lt;strong&gt;WindowManagerService&lt;strong&gt;&lt;strong&gt;之客户端&lt;/strong&gt;&lt;/strong&gt;Activity****布局&lt;/strong&gt;&lt;/span&gt;
 &lt;a href="#a---windowmanagerservice" class="heading-mark"&gt;
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"&gt;&lt;/path&gt;&lt;/svg&gt;
 &lt;/a&gt;
&lt;/h2&gt;&lt;h2 class="heading-element" id="一主要角色"&gt;&lt;span&gt;&lt;strong&gt;一&lt;/strong&gt;**、&lt;strong&gt;&lt;strong&gt;主要&lt;/strong&gt;&lt;/strong&gt;角色**&lt;/span&gt;
 &lt;a href="#%e4%b8%80%e4%b8%bb%e8%a6%81%e8%a7%92%e8%89%b2" class="heading-mark"&gt;
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"&gt;&lt;/path&gt;&lt;/svg&gt;
 &lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;WMS作为一个服务端，有多种客户端与其交互的场景。我们以常见的Activity为例：&lt;/p&gt;</description></item></channel></rss>